!RBIX
0
x
M
1
n
n
x
10
__script__
i
45
5
45
0
1
65
49
2
0
49
3
1
7
4
64
81
5
47
49
6
1
15
5
45
7
8
56
9
47
50
10
1
15
5
45
11
12
56
13
47
50
10
1
15
2
11
I
3
I
0
I
0
I
0
n
p
14
x
4
File
n
x
11
active_path
x
7
dirname
s
15
/spec_helper.rb
x
1
+
x
7
require
x
4
Word
n
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
74
5
56
0
47
50
1
0
15
5
7
2
64
56
3
47
50
4
1
15
5
7
5
64
56
6
47
50
4
1
15
5
7
7
64
56
8
47
50
4
1
15
5
7
9
64
56
10
47
50
4
1
15
5
7
11
64
56
12
47
50
4
1
15
5
7
13
64
56
14
47
50
4
1
11
I
4
I
0
I
0
I
0
I
-2
p
15
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
27
45
0
1
13
71
2
47
9
21
47
49
3
0
13
47
49
4
0
15
8
24
49
2
0
38
5
11
I
3
I
0
I
0
I
0
I
-2
p
6
x
4
Word
n
x
3
new
x
8
allocate
x
10
initialize
x
5
@word
p
3
I
0
I
5
I
1b
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
x
6
before
s
46
should return a frequency of one for new words
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
12
39
0
49
1
0
49
2
0
79
83
3
11
I
3
I
0
I
0
I
0
I
-2
p
4
x
5
@word
x
9
frequency
x
6
should
x
2
==
p
3
I
0
I
9
I
c
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
x
2
it
s
50
training with a word should increase its frequency
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
63
39
0
7
1
64
49
2
1
49
3
0
78
83
4
15
39
0
7
1
64
49
5
1
15
39
0
7
1
64
49
2
1
49
3
0
79
83
4
15
39
0
7
1
64
49
5
1
15
39
0
7
1
64
49
2
1
49
3
0
80
83
4
11
I
3
I
0
I
0
I
0
I
-2
p
6
x
5
@word
s
5
hello
x
12
frequency_of
x
6
should
x
2
==
x
13
add_next_word
p
11
I
0
I
d
I
f
I
e
I
18
I
f
I
27
I
10
I
30
I
11
I
3f
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
s
50
should maintain a total count of subword additions
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
76
39
0
49
1
0
49
2
0
78
83
3
15
39
0
7
4
64
49
5
1
15
39
0
49
1
0
49
2
0
79
83
3
15
39
0
7
6
64
49
5
1
15
39
0
49
1
0
49
2
0
80
83
3
15
39
0
7
6
64
49
5
1
15
39
0
49
1
0
49
2
0
4
3
83
3
11
I
3
I
0
I
0
I
0
I
-2
p
7
x
5
@word
x
16
total_next_count
x
6
should
x
2
==
s
5
first
x
13
add_next_word
s
6
second
p
15
I
0
I
15
I
c
I
16
I
15
I
17
I
21
I
18
I
2a
I
19
I
36
I
1a
I
3f
I
1b
I
4c
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
s
62
should return the word class object for the word that is added
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
57
39
0
7
1
64
49
2
1
19
0
15
20
0
49
3
0
49
4
0
39
0
7
1
64
49
5
1
83
6
15
39
0
7
1
64
49
2
1
19
1
15
20
0
49
3
0
49
4
0
20
1
49
3
0
83
6
11
I
6
I
2
I
0
I
0
I
-2
p
7
x
5
@word
s
4
word
x
13
add_next_word
x
9
frequency
x
6
should
x
12
frequency_of
x
2
==
p
9
I
0
I
1f
I
b
I
20
I
1e
I
21
I
29
I
22
I
39
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
2
x
8
sub_word
x
10
sub_word_2
s
38
should know the most popular next word
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
81
39
0
49
1
0
49
2
0
1
83
3
15
39
0
7
4
64
49
5
1
15
39
0
49
1
0
49
2
0
7
4
64
83
3
15
39
0
7
6
64
49
5
1
15
39
0
49
1
0
49
2
0
7
4
64
83
3
15
39
0
7
6
64
49
5
1
15
39
0
49
1
0
49
2
0
7
6
64
83
3
11
I
3
I
0
I
0
I
0
I
-2
p
7
x
5
@word
x
12
predict_next
x
6
should
x
2
==
s
5
first
x
13
add_next_word
s
6
second
p
15
I
0
I
26
I
c
I
27
I
15
I
28
I
23
I
29
I
2c
I
2a
I
3a
I
2b
I
43
I
2c
I
51
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
s
51
should be able to return the word object for a word
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
76
39
0
7
1
64
49
2
1
49
3
0
1
83
4
15
39
0
7
1
64
49
5
1
19
0
15
39
0
7
1
64
49
2
1
49
3
0
20
0
83
4
15
39
0
7
6
64
49
5
1
15
39
0
7
7
64
49
5
1
15
39
0
7
1
64
49
2
1
49
3
0
20
0
83
4
11
I
4
I
1
I
0
I
0
I
-2
p
8
x
5
@word
s
5
first
x
15
object_for_word
x
6
should
x
2
==
x
13
add_next_word
s
6
second
s
5
third
p
13
I
0
I
30
I
f
I
31
I
1a
I
32
I
2a
I
33
I
33
I
34
I
3c
I
35
I
4c
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
1
x
21
word_object_for_first
p
15
I
0
I
4
I
8
I
8
I
13
I
c
I
1e
I
14
I
29
I
1e
I
34
I
25
I
3f
I
2f
I
4a
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
x
8
describe
x
9
Predictor
n
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
52
5
56
0
47
50
1
0
15
5
7
2
64
56
3
47
50
4
1
15
5
7
5
64
56
6
47
50
4
1
15
5
7
7
64
56
8
47
50
4
1
15
5
7
9
64
56
10
47
50
4
1
11
I
4
I
0
I
0
I
0
I
-2
p
11
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
27
45
0
1
13
71
2
47
9
21
47
49
3
0
13
47
49
4
0
15
8
24
49
2
0
38
5
11
I
3
I
0
I
0
I
0
I
-2
p
6
x
9
Predictor
n
x
3
new
x
8
allocate
x
10
initialize
x
10
@predictor
p
3
I
0
I
3b
I
1b
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
x
6
before
s
48
should have a method for training with new texts
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
18
39
0
7
1
64
49
2
1
15
39
0
7
3
64
49
2
1
11
I
3
I
0
I
0
I
0
I
-2
p
4
x
10
@predictor
s
69
      This is my new text that I am adding and feeling awesome about

x
8
add_text
s
99
      Here is another text. I am not sure if it works.
      Hahaha. It certainly is more dynamic.

p
5
I
0
I
3f
I
9
I
42
I
12
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
x
2
it
s
50
should predict the next N words following a string
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
64
39
0
7
1
64
80
49
2
2
49
3
0
7
4
64
83
5
15
39
0
7
6
64
49
7
1
15
39
0
7
1
64
80
49
2
2
49
3
0
7
8
64
83
5
15
39
0
7
1
64
4
4
49
2
2
49
3
0
7
9
64
83
5
11
I
4
I
0
I
0
I
0
I
-2
p
10
x
10
@predictor
s
11
hello there
x
24
predict_next_words_after
x
6
should
s
0

x
2
==
s
38
      Hello there good friend of mine

x
8
add_text
s
11
good friend
s
19
good friend of mine
p
9
I
0
I
49
I
12
I
4a
I
1b
I
4d
I
2d
I
4e
I
40
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
s
60
should prepare text by splitting it up and removing dots etc
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
93
39
0
7
1
64
49
2
1
49
3
0
7
4
64
7
4
64
35
2
83
5
15
39
0
7
6
64
49
2
1
49
3
0
7
4
64
45
7
8
7
4
64
35
3
83
5
15
39
0
7
9
64
49
2
1
49
3
0
7
10
64
7
11
64
7
12
64
7
13
64
7
14
64
45
7
15
7
16
64
7
17
64
7
18
64
45
7
19
35
10
83
5
11
I
c
I
0
I
0
I
0
I
-2
p
20
x
10
@predictor
s
13
blabla blabla
x
12
prepare_text
x
6
should
s
6
blabla
x
2
==
s
14
blabla. blabla
x
3
DOT
n
s
37
This is some awesome SHIT. I know it.
s
4
this
s
2
is
s
4
some
s
7
awesome
s
4
shit
n
s
1
i
s
4
know
s
2
it
n
p
9
I
0
I
53
I
16
I
54
I
2f
I
55
I
3a
I
56
I
5d
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
s
62
should strip out special characters before presenting the text
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
82
39
0
7
1
45
2
3
47
101
4
7
5
63
3
49
6
1
49
7
0
7
8
64
83
9
15
39
0
7
1
45
2
10
47
101
4
7
11
45
12
13
47
101
4
7
5
63
5
49
6
1
49
7
0
7
14
64
83
9
15
7
15
64
19
0
15
39
0
20
0
49
6
1
49
7
0
7
16
64
83
9
11
I
8
I
1
I
0
I
0
I
-2
p
17
x
10
@predictor
s
6
hello 
x
3
DOT
n
x
4
to_s
s
6
 there
x
24
strip_special_characters
x
6
should
s
12
hello. there
x
2
==
n
s
1
 
x
5
COMMA
n
s
13
hello., there
s
77
mine my love shall render him [[dot]] and she is mine [[comma]] i may dispose
s
61
mine my love shall render him. and she is mine, i may dispose
p
11
I
0
I
5a
I
1a
I
5b
I
3c
I
5c
I
42
I
5d
I
4c
I
5e
I
52
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
1
x
4
text
p
11
I
0
I
3a
I
8
I
3e
I
13
I
48
I
1e
I
52
I
29
I
59
I
34
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
p
7
I
0
I
1
I
15
I
3
I
20
I
39
I
2d
x
64
/Users/seb/Programmering/Ruby/WriteWithMe/spec/predictor_test.rb
p
0
